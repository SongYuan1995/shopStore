<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace的值为mapper接口的全路径  包名.接口名 -->
<mapper namespace="com.byzx.authority.dao.RoleMapper">
	 <resultMap id="roleBaseResultMap" type="Role" >
	   <id column="role_id" property="roleId" jdbcType="INTEGER" />
	   <result column="role_name" property="roleName" jdbcType="VARCHAR" />
	   <result column="role_desc" property="roleDesc" jdbcType="VARCHAR" />
	   <result column="role_code" property="roleCode" jdbcType="VARCHAR" />
	   <result column="role_state" property="roleState" jdbcType="CHAR" />
	   <result column="create_by" property="createBy" jdbcType="INTEGER" />
	   <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	   <result column="update_by" property="updateBy" jdbcType="INTEGER" />
	   <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
	 </resultMap>
	   <resultMap id="userBaseResultMap" type="UserInfo" >
		   <id column="user_id" property="userId" jdbcType="INTEGER" />
		   <result column="group_id" property="groupId" jdbcType="INTEGER" />
		   <result column="nick_name" property="nickName" jdbcType="VARCHAR" />
		   <result column="user_code" property="userCode" jdbcType="VARCHAR" />
		   <result column="user_pwd" property="userPwd" jdbcType="VARCHAR" />
		   <result column="user_type" property="userType" jdbcType="CHAR" />
		   <result column="user_state" property="userState" jdbcType="CHAR" />
		   <result column="is_delete" property="isDelete" jdbcType="CHAR" />
		   <result column="create_by" property="createBy" jdbcType="INTEGER" />
		   <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		   <result column="update_by" property="updateBy" jdbcType="INTEGER" />
		   <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
	  </resultMap>
	  <!-- 角色权限 -->
	   <resultMap id="roleAuthBaseResultMap" type="RoleAuth" >
	    <id column="role_auth_id" property="roleAuthId" jdbcType="INTEGER" />
	    <result column="role_id" property="roleId" jdbcType="INTEGER" />
	    <result column="auth_id" property="authId" jdbcType="INTEGER" />
	  </resultMap>
	  <!-- 建立role和user_info映射关系 -->
	  <resultMap type="Role" id="roleAndUserInfoMap" extends="roleBaseResultMap">
	  		<association property="userInfo" javaType="UserInfo" resultMap="userBaseResultMap">
	  		</association>
	  </resultMap>
	  <!-- 动态sql的查询role表 -->
	  <select id="findRoles" parameterType="HashMap" resultMap="roleAndUserInfoMap">
	  	SELECT r.*,ui.* FROM role r,user_info ui 
	  	<where>
	  		r.create_by = ui.user_id 
	  		<if test="null!=role" >
	  			<if test="null!=role.roleName and ''!=role.roleName" >
	  				and role_name like concat("%",#{role.roleName},"%")
	  			</if>
	  			<if test="null!=role.roleState and ''!=role.roleState" >
	  				and role_state = #{role.roleState}
	  			</if>
	  			
	  		</if>
	  		<if test="null!=page">
	  			limit #{page.limitIndex},#{page.pageSize}
	  		</if>
	  	</where>
	  </select>
	  <!-- 验证角色名，角色Code是否唯一 -->
	  <select id="findRoleByRoleInfo" parameterType="HashMap" resultMap="roleBaseResultMap">
  			select * from role 
	  		<where>
	  			<if test="null!=role">
	  				<if test="null!=role.roleName and ''!=role.roleName" >
	  					and role_name = #{role.roleName}
	  				</if>
	  				<if test="null!=role.roleCode and ''!=role.roleCode">
	  					and role_code = #{role.roleCode}
	  				</if>
	  			</if>
	  		</where>
	  </select>
	  <!-- 点击添加角色按钮 -->
	  <insert id="insertOneRole" parameterType="HashMap">
	  		insert into role (role_name,role_desc,role_code,create_by) values(#{role.roleName},#{role.roleDesc},#{role.roleCode},#{role.createBy}) 
	  </insert>
	  <!-- 点击修改角色按钮 -->
	  <update id="updateOneRole" parameterType="HashMap">
	  		update role set role_name = #{role.roleName},role_desc = #{role.roleDesc} where role_id = #{role.roleId}
	  </update>
	  <!-- 点击删除角色按钮 -->
	  <delete id="deleteOneRole" parameterType="Integer">
	  		delete from role where role_id = #{roleId}
	  </delete>
	  <!-- 启用/禁用角色 -->
	  <update id="enableAndDisable" parameterType="Role">
	  		update role set role_state = #{roleState} where role_id = #{roleId}
	  </update>
	  <!-- 根据roleId查询当前的RoleId所对应 权限-->
	  <select id="findAllAuthbyURoleId" parameterType="Integer" resultMap="roleAuthBaseResultMap">
	  		select * from role_auth where role_id = #{roldId}
	  </select>
	  <!-- 删除当前roleId所用的权限 -->
	  <delete id="delCurrRoleAuthIds" parameterType="Integer">
	  		delete from role_auth where role_id = #{roleId}
	  </delete>
	  <!-- 循环给角色添加权限 -->
  	 <insert id="insertCurrRoleAuthId" parameterType="HashMap">
  		insert into role_auth (role_id,auth_id) values (#{roleId},#{authId})
  	</insert>
	  
	  
	  
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 

</mapper>	