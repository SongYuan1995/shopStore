<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace的值为mapper接口的全路径  包名.接口名 -->
<mapper namespace="com.byzx.authority.dao.UserGroupMapper">
	<!-- UserGroup 的Mapper映射 -->
	<resultMap id="groupBaseResultMap" type="UserGroup" >
	    <id column="group_id" property="groupId" jdbcType="INTEGER" />
	    <result column="group_name" property="groupName" jdbcType="VARCHAR" />
	    <result column="group_code" property="groupCode" jdbcType="VARCHAR" />
	    <result column="group_desc" property="groupDesc" jdbcType="VARCHAR" />
	    <result column="group_state" property="groupState" jdbcType="CHAR" />
	    <result column="create_by" property="createBy" jdbcType="CHAR" />
	    <result column="is_delete" property="isDelete" jdbcType="CHAR" />
	  </resultMap>
	   <resultMap id="userBaseResultMap" type="UserInfo" >
		   <id column="user_id" property="userId" jdbcType="INTEGER" />
		   <result column="group_id" property="groupId" jdbcType="INTEGER" />
		   <result column="nick_name" property="nickName" jdbcType="VARCHAR" />
		   <result column="user_code" property="userCode" jdbcType="VARCHAR" />
		   <result column="user_pwd" property="userPwd" jdbcType="VARCHAR" />
		   <result column="user_type" property="userType" jdbcType="CHAR" />
		   <result column="user_state" property="userState" jdbcType="CHAR" />
		   <result column="is_delete" property="isDelete" jdbcType="CHAR" />
		   <result column="create_by" property="createBy" jdbcType="INTEGER" />
		   <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		   <result column="update_by" property="updateBy" jdbcType="INTEGER" />
		   <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
	  </resultMap>
	  
	   <!-- 建立user_group和user_info映射关系 -->
	  <resultMap type="userGroup" id="groupAndUserInfoMap" extends="groupBaseResultMap">
	  		<association property="userInfo" javaType="UserInfo" resultMap="userBaseResultMap">
	  		</association>
	  </resultMap>
	  
	  <select id="findGroupFuzzy" parameterType="HashMap" resultMap="groupAndUserInfoMap">
		SELECT ug.*,ui.* FROM user_group ug,user_info ui
		<where>
			ug.create_by = ui.user_id and ug.is_delete = '0'
			<if test="null!=userGroup">
			  <!-- 模糊查询时的userGroup.groupName -->
			   <if test="userGroup.groupName!=null and userGroup.groupName!=''">
			  		 and group_name like concat("%",#{userGroup.groupName},"%")
			  	</if>
			  <!-- 模糊查询时的groupState -->
			  <if test="userGroup.groupState!=null and userGroup.groupState!=''">
			  	 and group_state = #{userGroup.groupState}
			  </if>
			</if>
		</where>
		 <if test="null!=page">
			  	limit #{page.limitIndex},#{page.pageSize}
		 </if>
	</select>
	 <!-- 验证用户组名和用户组Code，用户组名称GroupName和groupCode是否唯一 -->
	  <select id="findGroupByGroupInfo" parameterType="HashMap" resultMap="groupBaseResultMap">
  			select * from user_group 
	  		<where>
	  			<if test="null!=userGroup">
	  				<if test="null!=userGroup.groupName and ''!=userGroup.groupName" >
	  					and group_name = #{userGroup.groupName}
	  				</if>
	  				<if test="null!=userGroup.groupCode and ''!=userGroup.groupCode">
	  					and group_code = #{userGroup.groupCode}
	  				</if>
	  			</if>
	  		</where>
	  </select>
	<!-- 向user_group添加一条数据 -->
	<insert id="insertOneGroup" parameterType="HashMap">
		insert into user_group (group_name,group_code,group_desc,create_by) 
		values(#{userGroup.groupName},#{userGroup.groupCode},#{userGroup.groupDesc},#{userGroup.createBy})
	</insert>
	<!-- 修改的用户组updateOneGroup -->
	<!-- 点击修改角色按钮 -->
  	<update id="updateOneGroup" parameterType="HashMap">
  		update user_group set group_name = #{userGroup.groupName},group_desc = #{userGroup.groupDesc} where group_id = #{userGroup.groupId}
  	</update>
	 <!-- 删除用户组 -->
	 <update id="deleteUserGroup" parameterType="UserGroup">
	 		update user_group set is_delete = #{isDelete} where group_id = #{groupId}
	 </update>
	 
	 <!-- 启用/禁用用户组 -->
	 <update id="enAndDisGroup" parameterType="UserGroup">
	 		update user_group set group_state = #{groupState} where  group_id = #{groupId}
	 </update>
	 <!-- 查询当前的用户组所对应的角色 -->
	  <select id="findAllRoleIdString" parameterType="Integer" resultType="String">
  			SELECT GROUP_CONCAT(role_id) FROM group_role WHERE group_id=#{groupId}	
  	  </select>
  	  <!-- 根据groupId删除当前用户组的所有角色 -->
  	  <delete id="deleteThisGroupRoles" parameterType="Integer">
  	  		delete from group_role where group_id = #{groupId}
  	  </delete>
  	  <!-- 根据groupId循环添加为该用户组分配的角色 -->
  	  <insert id="insertRolesForGroup" parameterType="GroupRole">
  	  		insert into group_role (group_id,role_id) values(#{groupId},#{roleId})
  	  </insert>

  	
	




</mapper>